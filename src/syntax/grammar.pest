// tokens

left_paren = _{ "(" }
right_paren = _{ ")" }
paren_cat = _{ left_paren | right_paren }

left_brace = _{ "{" }
right_brace = _{ "}" }
brace_cat = _{ left_brace | right_brace }

comment_mark = _{ "!" }
comment_prefix = _{ comment_mark ~ left_brace}
comment_suffix = _{ right_brace }

separator_mark = _{ ";" }

trivial_mark_cat = { paren_cat | brace_cat | comment_mark | separator_mark }

lambda_mark = _{ "λ" | "\\" }
pattern_mark = _{ "." }
typed_mark = _{ ":" }

map_mark = _{ "→" | "->" }
sum_mark = _{ "σ" | "/" }

bind_mark = _{ "=" }

featured_mark_cat = _{ lambda_mark | pattern_mark | typed_mark | map_mark | sum_mark | bind_mark }

mark_cat = _{ trivial_mark_cat | featured_mark_cat }

ident_cat = { !mark_cat ~ (LETTER | NUMBER | SYMBOL | PUNCTUATION) }

WHITESPACE = _{ (!NEWLINE ~ WHITE_SPACE)+ }
COMMENT = _{ comment_prefix ~ (!comment_suffix ~ ANY)* ~ comment_suffix }

separator = _{ NEWLINE+ | separator_mark ~ NEWLINE* }
lines = _{ NEWLINE* }

// rules

ident = @{ ident_cat+ }
atom = { left_paren ~ expr ~ right_paren | ident }

pattern = { expr ~ pattern_mark ~ expr }
patterns = { left_brace  ~ lines ~ pattern ~ (separator ~ pattern)* ~ lines ~ right_brace | pattern }

lambda = { lambda_mark ~ patterns }
apply = { atom ~ atom+ }
typed = { atom ~ typed_mark ~ type_ }

expr = { lambda | apply | typed | atom }

type_atom = { left_paren ~ type_ ~ right_paren | ident }

map = { type_atom ~ (map_mark ~ map)? }

instance = { ident ~ typed_mark ~ type_ }
instances = { left_brace ~ lines ~ instance ~ (separator ~ instance)* ~ lines ~ right_brace | instance }

sum = { sum_mark ~ instances }

type_ = { map | type_atom }

bind = { ident ~ bind_mark ~ (expr | sum) }

main = { SOI ~ lines ~ bind? ~ (separator ~ bind)* ~ lines ~ EOI }
