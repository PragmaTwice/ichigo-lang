WHITESPACE = _{ " " | "\t" }

split = _{ NEWLINE+ | ";" ~ NEWLINE* }

line = _{ NEWLINE* }

ident = @{ (LETTER | NUMBER)+ }
atom = { ident | "(" ~ expr ~ ")" }

pattern = { atom ~ ":" ~ type_ ~ "." ~ expr }
patterns = { pattern | "{"  ~ line ~ (pattern ~ split)+ ~ "}" }

lambda = { "λ" ~ patterns }
apply = { atom ~ atom+ }
typed = { atom ~ ":" ~ type_ }

expr = { lambda | apply | typed | atom }

tatom = { ident | "(" ~ type_ ~ ")" }

map = { tatom ~ ("→" ~ tatom)+ }

instance = { ident ~ ":" ~ type_ }
instances = { instance | "{" ~ line ~ (instance ~ split)* ~ "}" }

typedef = { "τ" ~ instances }

type_ = { typedef | map | tatom }

bind = { ident ~ "=" ~ (!"τ" ~ expr | type_) }


main = { SOI ~ line ~ (bind ~ split)* ~ EOI }
