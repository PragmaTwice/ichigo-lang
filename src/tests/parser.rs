use crate::syntax::parser;
use crate::syntax::ast::*;

#[test]
fn test_example() {
    assert_eq!(parser::parse_file("example/hello.ichigo"), vec![
        Bind::Type(
            Ident(
                "‚Ñï".to_string(),
            ),
            Box::new(Type::Sum(
                vec![
                    Instance(
                        Ident(
                            "0".to_string(),
                        ),
                        Box::new(Type::Var(
                            Ident(
                                "‚Ñï".to_string(),
                            ),
                        )),
                    ),
                    Instance(
                        Ident(
                            "1+".to_string(),
                        ),
                        Box::new(Type::Map(
                            Box::new(Type::Var(
                                Ident(
                                    "‚Ñï".to_string(),
                                ),
                            )),
                            Box::new(Type::Var(
                                Ident(
                                    "‚Ñï".to_string(),
                                ),
                            )),
                        )),
                    ),
                ],
            )),
        ),
        Bind::Expr(
            Ident(
                "+".to_string(),
            ),
            Box::new(Expr::Lambda(
                vec![
                    Pattern {
                        param: Box::new(Expr::Typed(
                            Box::new(Expr::Var(
                                Ident(
                                    "x".to_string(),
                                ),
                            )),
                            Box::new(Type::Var(
                                Ident(
                                    "‚Ñï".to_string(),
                                ),
                            )),
                        )),
                        expr: Box::new(Expr::Lambda(
                            vec![
                                Pattern {
                                    param: Box::new(Expr::Typed(
                                        Box::new(Expr::Apply(
                                            Box::new(Expr::Var(
                                                Ident(
                                                    "1+".to_string(),
                                                ),
                                            )),
                                            Box::new(Expr::Var(
                                                Ident(
                                                    "y".to_string(),
                                                ),
                                            )),
                                        )),
                                        Box::new(Type::Var(
                                            Ident(
                                                "‚Ñï".to_string(),
                                            ),
                                        )),
                                    )),
                                    expr: Box::new(Expr::Apply(
                                        Box::new(Expr::Var(
                                            Ident(
                                                "1+".to_string(),
                                            ),
                                        )),
                                        Box::new(Expr::Apply(
                                            Box::new(Expr::Apply(
                                                Box::new(Expr::Var(
                                                    Ident(
                                                        "+".to_string(),
                                                    ),
                                                )),
                                                Box::new(Expr::Var(
                                                    Ident(
                                                        "x".to_string(),
                                                    ),
                                                )),
                                            )),
                                            Box::new(Expr::Var(
                                                Ident(
                                                    "y".to_string(),
                                                ),
                                            )),
                                        )),
                                    )),
                                },
                            ],
                        )),
                    },
                ],
            )),
        ),
        Bind::Type(
            Ident(
                "‚ÑïùìÅ".to_string(),
            ),
            Box::new(Type::Sum(
                vec![
                    Instance(
                        Ident(
                            "‚àÖ".to_string(),
                        ),
                        Box::new(Type::Var(
                            Ident(
                                "‚ÑïùìÅ".to_string(),
                            ),
                        )),
                    ),
                    Instance(
                        Ident(
                            "++".to_string(),
                        ),
                        Box::new(Type::Map(
                            Box::new(Type::Var(
                                Ident(
                                    "‚Ñï".to_string(),
                                ),
                            )),
                            Box::new(Type::Map(
                                Box::new(Type::Var(
                                    Ident(
                                        "‚ÑïùìÅ".to_string(),
                                    ),
                                )),
                                Box::new(Type::Var(
                                    Ident(
                                        "‚ÑïùìÅ".to_string(),
                                    ),
                                )),
                            )),
                        )),
                    ),
                ],
            )),
        ),
        Bind::Expr(
            Ident(
                "take".to_string(),
            ),
            Box::new(Expr::Lambda(
                vec![
                    Pattern {
                        param: Box::new(Expr::Typed(
                            Box::new(Expr::Var(
                                Ident(
                                    "0".to_string(),
                                ),
                            )),
                            Box::new(Type::Var(
                                Ident(
                                    "‚Ñï".to_string(),
                                ),
                            )),
                        )),
                        expr: Box::new(Expr::Lambda(
                            vec![
                                Pattern {
                                    param: Box::new(Expr::Typed(
                                        Box::new(Expr::Var(
                                            Ident(
                                                "x".to_string(),
                                            ),
                                        )),
                                        Box::new(Type::Var(
                                            Ident(
                                                "‚ÑïùìÅ".to_string(),
                                            ),
                                        )),
                                    )),
                                    expr: Box::new(Expr::Var(
                                        Ident(
                                            "‚àÖ".to_string(),
                                        ),
                                    )),
                                },
                            ],
                        )),
                    },
                ],
            )),
        ),
    ]);
}
